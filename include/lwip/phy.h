#pragma once

#define USING_KSZ9563R

#ifdef USING_LAN8742
#include "lan8742.h"

int32_t ETH_PHY_IO_Init(void);
int32_t ETH_PHY_IO_DeInit(void);
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal);
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal);
int32_t ETH_PHY_IO_GetTick(void);

#define PHY_STATUS_READ_ERROR  LAN8742_STATUS_READ_ERROR
#define PHY_STATUS_WRITE_ERROR LAN8742_STATUS_WRITE_ERROR
#define PHY_STATUS_ADDRESS_ERROR   LAN8742_STATUS_ADDRESS_ERROR
#define PHY_STATUS_RESET_TIMEOUT   LAN8742_STATUS_RESET_TIMEOUT
#define PHY_STATUS_ERROR   LAN8742_STATUS_ERROR
#define PHY_STATUS_OK  LAN8742_STATUS_OK
#define PHY_STATUS_LINK_DOWN   LAN8742_STATUS_LINK_DOWN
#define PHY_STATUS_100MBITS_FULLDUPLEX LAN8742_STATUS_100MBITS_FULLDUPLEX
#define PHY_STATUS_100MBITS_HALFDUPLEX LAN8742_STATUS_100MBITS_HALFDUPLEX
#define PHY_STATUS_10MBITS_FULLDUPLEX  LAN8742_STATUS_10MBITS_FULLDUPLEX
#define PHY_STATUS_10MBITS_HALFDUPLEX  LAN8742_STATUS_10MBITS_HALFDUPLEX
#define PHY_STATUS_AUTONEGO_NOTDONE    LAN8742_STATUS_AUTONEGO_NOTDONE

#define phy_t lan8742_Object_t
#define phy_ioctx_t lan8742_IOCtx_t
#define phy_ioctx_default (phy_ioctx_t){ETH_PHY_IO_Init,  ETH_PHY_IO_DeInit, ETH_PHY_IO_WriteReg, ETH_PHY_IO_ReadReg, ETH_PHY_IO_GetTick}

#define Phy_RegisterBusIO LAN8742_RegisterBusIO
#define Phy_Init LAN8742_Init
#define Phy_DeInit LAN8742_DeInit

#define Phy_GetLinkState LAN8742_GetLinkState

#elifdef USING_KSZ9563R

#include "ksz9563r.h"

int32_t ETH_PHY_I2C_IO_Init(void);
int32_t ETH_PHY_I2C_IO_DeInit(void);
int32_t ETH_PHY_I2C_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal);
int32_t ETH_PHY_I2C_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal);
int32_t ETH_PHY_I2C_IO_ReadReg16(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal);
int32_t ETH_PHY_I2C_IO_WriteReg16(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal);
int32_t ETH_PHY_I2C_IO_GetTick(void);

#define PHY_STATUS_READ_ERROR  KSZ9563R_STATUS_READ_ERROR
#define PHY_STATUS_WRITE_ERROR KSZ9563R_STATUS_WRITE_ERROR
#define PHY_STATUS_ADDRESS_ERROR   KSZ9563R_STATUS_ADDRESS_ERROR
#define PHY_STATUS_RESET_TIMEOUT   KSZ9563R_STATUS_RESET_TIMEOUT
#define PHY_STATUS_ERROR   KSZ9563R_STATUS_ERROR
#define PHY_STATUS_OK  KSZ9563R_STATUS_OK
#define PHY_STATUS_LINK_DOWN   KSZ9563R_STATUS_LINK_DOWN
#define PHY_STATUS_100MBITS_FULLDUPLEX KSZ9563R_STATUS_100MBITS_FULLDUPLEX
#define PHY_STATUS_100MBITS_HALFDUPLEX KSZ9563R_STATUS_100MBITS_HALFDUPLEX
#define PHY_STATUS_10MBITS_FULLDUPLEX  KSZ9563R_STATUS_10MBITS_FULLDUPLEX
#define PHY_STATUS_10MBITS_HALFDUPLEX  KSZ9563R_STATUS_10MBITS_HALFDUPLEX
#define PHY_STATUS_AUTONEGO_NOTDONE    KSZ9563R_STATUS_AUTONEGO_NOTDONE

#define phy_t ksz9563r_t
#define phy_ioctx_t ksz9563r_IOCtx_t
#define phy_ioctx_default (phy_ioctx_t){ETH_PHY_I2C_IO_Init,  ETH_PHY_I2C_IO_DeInit, ETH_PHY_I2C_IO_WriteReg, ETH_PHY_I2C_IO_ReadReg, ETH_PHY_I2C_IO_WriteReg16, ETH_PHY_I2C_IO_ReadReg16, ETH_PHY_I2C_IO_GetTick}

#define Phy_RegisterBusIO KSZ9563R_RegisterBusIO
#define Phy_Init KSZ9563R_Init
#define Phy_DeInit KSZ9563R_DeInit

#define Phy_GetLinkState KSZ9563R_GetLinkState
#else
    #error "no Phy Driver is selected"
#endif